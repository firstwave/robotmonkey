#!/usr/bin/env python
'''
Author: Oliver Bartley (obartley@ebay.com)
Date: 28 NOV 2011
Version: 1.0

Configure the Java environment and RobotFramework to use Sikuli-based libraries.
For usage, run with the -h option
'''

import sys, os
import argparse
import subprocess

def main():
    # define some 'constants'

    RFW_JAR = 'libs/robotframework-2.6.3.jar'
    DEFAULT_RFW_SUITE = "test-suite"
    # parse command line arguments
    parser = argparse.ArgumentParser(description = "Configure the Java environment and RobotFramework to use Sikuli-based libraries")


    parser.add_argument("--android-home", dest="androidHome", default=None,
                        help="Sets path to local Android SDK. Default is to use the value of the environment variable $ANDROID_HOME", metavar = "DIR")

    parser.add_argument("--set-property", action='append', dest='props',
                        help="Sets a Java system property 'robotmonkey.NAME'='VALUE', e.g. '--set-property xmlrunner.output=foo/bar' will set the Java system property 'robotmonkey.xmlrunner.output' equal to 'foo/bar'. This is useful to pass additional data to the sikuli environment from the command line.", metavar="NAME=VALUE")

    parser.add_argument("--outputdir", dest="outputdir", default="results",
                        help="Configure the directory where robotframework sends file output", metavar = "DIR")
    parser.add_argument("--snapshotdir", dest="snapshotdir", default="snapshots",
                        help="Configure the path where seemonkey stores screen shots", metavar="DIR")
    parser.add_argument("--loglevel", dest="loglevel", default="TRACE",
                    help="Configure the logging level of robotframework output", metavar = "LEVEL")
    parser.add_argument("--critical", dest="critical", nargs='+',
                    help="Mark a tag as critical", metavar = "TAG")
    parser.add_argument("--noncritical", dest="noncritical", nargs="+",
                    help="Mark a tag non-critical", metavar = "TAG")


    parser.add_argument("--libs", dest="testLibs", nargs='*', default = [DEFAULT_RFW_SUITE + "/libs"],
                        help="Specifies a PATH-style directory list containing RobotFramework step libraries", metavar = "DIR")

    parser.add_argument("--suite", action='store_true',
                        help='use this to explicitly declare remaining positional arguments as test suites. useful when passing multiple positional arguments')
    parser.add_argument("test_suite", nargs='*', default = [DEFAULT_RFW_SUITE],
                        help="path or paths pointing to robotframework test data")
    
    args = parser.parse_args()

    print(args)

    os.chdir(os.path.dirname(os.path.abspath(__file__))) # cd into robotmonkey root

    if args.androidHome is None:
        try:
            androidHome = stripSlash(os.environ['ANDROID_HOME'])
        except:
            # throws a KeyError if the variable is not set
            sys.stderr.write("Cannot locate Android SDK\n")
            sys.stderr.write("Set $ANDROID_HOME or use the --android-home option to specify a path.\n")
            exit(1)
    else:
        androidSdk = stripSlash(args.androidHome)
    
    try:
        javaClasspath = os.environ['CLASSPATH']
    except:
        # throws a KeyError if the variable is not set
        javaClasspath = ''

    # configure the classpath
    for j in [RFW_JAR, "libs/sikuli-script.jar", "libs/seemonkey.jar"]:
        javaClasspath = "%s:%s" %(javaClasspath, j)
    
    # add android sdk libs to the classpath string
    for j in ['guavalib.jar',
              'monkeyrunner.jar',
              'sdklib.jar',
              'chimpchat.jar',
              'ddmlib.jar',
              'hierarchyviewer2.jar',
              'hierachyviewer.jar',
              'x86/swt.jar']:
        javaClasspath = "%s:%s/tools/lib/%s" % (javaClasspath, androidHome, j)

    # configure the python path, including rfw libraries
    pythonPath = ''
    for d in [RFW_JAR + '/Lib',
              'libs/sikuli-script.jar/Lib',
              'libs/seemonkey.jar/python',
              'libs/python']:
        pythonPath  = "%s:%s" % (pythonPath, d)

    # add test library PATH:
    # TODO: make the library path smarter in the event that the default suite has been overridden
    for d in args.testLibs:
        pythonPath = "%s:%s" % (pythonPath, d)

    # construct the process call in a list object
    procCall = ["java", "-cp", javaClasspath]
    
    # add set-property arguments, if available
    # note the addition of the seemonkey namespace, which makes this command less able
    # to unintentionaly attempt to set a Java system property.
    # p should be in the form of "key=value" so that the arg ends up looking like "-Dseemonkey.key=value"
    if args.props is not None:
        for p in args.props:
            procCall.append("-Dseemonkey.%s" % p)

    # set the python path
    procCall.append("-Dpython.path=%s" % pythonPath)

    # set the android sdk path so that SeeMonkey can see it
    procCall.append("-Dandroid.sdk.dir=%s" % androidHome)
    
    procCall.append("org.robotframework.RobotFramework")

    # append rfw args:
    procCall.append("--loglevel=%s" % args.loglevel)
    procCall.append("--outputdir=%s" % args.outputdir)

    # add non/critical tags, if specified
    if args.critical is not None:
        for t in args.critical:
            procCall.append("--critical=%s" % t)

    if args.noncritical is not None:
        for t in args.noncritical:
            procCall.append("--noncritical=%s" % t)

    # add the test suite path(s) as args to rfw
    procCall += args.test_suite

    printIter(procCall)

    #subprocess.call(procCall) # execute the proc call

def stripSlash(path):
    '''
    Strip the trailing slash, if present, in a given path
    '''
    if path[-1:] == "/":
        path = path[0:-1]
    return path

def printIter(iterable):
    for i in iterable:
        print(i)

if (__name__ == "__main__"):
    main()
